{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","props","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","to","MissionKey","Launches","LAUNCHES_QUERY","gql","useQuery","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","useParams","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8b4cd36.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d3ae1aeb.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nexport default function LaunchItem(props) {\n\n    const { launch } = props;\n    const {flight_number, mission_name, launch_date_local, launch_success} = launch\n    \n\n    return (\n      <div className=\"card card-body mb-3\">\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <h4>\n              Mission:{\" \"}\n              <span\n                className={classNames({\n                  \"text-success\": launch_success,\n                  \"text-danger\": !launch_success,\n                })}\n              >\n                {mission_name}\n              </span>\n            </h4>\n            <p>\n              Date: <Moment>{launch_date_local}</Moment>\n            </p>\n          </div>\n          <div className=\"col-md-3\">\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n          </div>\n        </div>\n      </div>\n    );\n}\n","import React from 'react'\n\nfunction MissionKey() {\n    return (\n      <div className=\"my-3\">\n        <p>\n          <span className=\"px-3 mr-2 bg-success\" /> = Success\n        </p>\n        <p>\n          <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n        </p>\n      </div>\n    );\n}\n\nexport default MissionKey\n","import React from 'react'\nimport { gql, useQuery } from \"@apollo/client\";\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey';\n\nconst Launches = () => {\n\n    const LAUNCHES_QUERY = gql`\n    query LaunchesQuery{\n        launches{\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n    \n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n\n    if (loading) return <h4>Loading...</h4>;\n    if (error) console.log(error);\n\n    return (\n      <div>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n            <MissionKey />\n        {data.launches.map((launch) => (\n          <LaunchItem key={launch.mission_name} launch={launch} />\n        ))}\n      </div>\n    );\n}\n\nexport default Launches\n\n\n\n","import React from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Link, useParams } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LauncheQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nfunction Launch() {\n  let { flight_number } = useParams();\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number },\n  });\n\n  if (loading) return <h4>Loading...</h4>;\n  if (error) console.log(error);\n  // console.log(data)\n\n  const {\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission:</span> {mission_name}\n      </h1>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch Success:{\" \"}\n          <span\n            className={classNames({\n              \"text-success\": launch_success,\n              \"text-danger\": !launch_success,\n            })}\n          >\n            {launch_success ? \"Yes\" : \"No\"}\n          </span>\n        </li>\n      </ul>\n\n      <h4 className=\"my-3\">Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n          </ul>\n          <hr />\n          <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n    </div>\n  );\n}\n\nexport default Launch;\n","import \"./App.css\";\nimport logo from \"./logo.png\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX logo\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}